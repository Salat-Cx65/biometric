apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
//    compileSdkPreview compileSDK
    compileSdkVersion compileSDK
    defaultConfig {
        minSdkVersion minSDK
        //targetSdkPreview targetSDK
        targetSdkVersion targetSDK
        consumerProguardFiles "proguard-project-common.pro"
    }

    namespace 'dev.skomlach.common'
    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    kotlinOptions {
        jvmTarget = javaVersion.toString()
    }
}
kotlin {
    jvmToolchain(javaVersion.ordinal() + 1)
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "androidx.appcompat:appcompat:1.6.1"
    implementation "androidx.window:window:1.2.0-beta01"
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.1.0'
    implementation 'com.google.guava:guava:32.0.0-android'
    implementation 'com.jaredrummler:android-device-names:2.1.0'
    implementation 'com.google.code.gson:gson:2.10.1'
}

afterEvaluate {
    android.libraryVariants.all { v ->
        if (v.buildType.name == "release") {
            v.assemble.doFirst {
                def device = new File("$projectDir/src/main/assets/devices.json")
                println("Path" + device.absolutePath)
                if (device.exists()) {
                    device.delete()
                }
                new URL("https://github.com/nowrom/devices/blob/main/devices.json?raw=true")
                        .withInputStream { i -> device.withOutputStream { it << i } }

                if (!device.exists()) {
                    throw IllegalStateException("Device spec are missing")
                }
                def by_brand = new File("$projectDir/src/main/assets/by_brand.json")
                println("Path" + by_brand.absolutePath)
                if (by_brand.exists()) {
                    by_brand.delete()
                }
                new URL("https://github.com/androidtrackers/certified-android-devices/blob/master/by_brand.json?raw=true")
                        .withInputStream { i -> by_brand.withOutputStream { it << i } }
                if (!by_brand.exists()) {
                    throw IllegalStateException("Brand spec are missing")
                }
            }
        }
    }
}
// Publishing
ext {
    PUBLISH_GROUP_ID = libsGroupId
    PUBLISH_ARTIFACT_ID = libArtifactId_common
    PUBLISH_VERSION = libVersion
}

apply from: "${rootProject.projectDir}/scripts/publish-mavencentral.gradle"
